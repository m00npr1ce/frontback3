document.addEventListener("DOMContentLoaded", () => {
    const productList = document.getElementById("productList");
    const form = document.getElementById("addProductForm");

    function loadProducts() {
        fetch("http://localhost:8080/api/products")
            .then(response => response.json())
            .then(products => {
                productList.innerHTML = "";
                products.forEach(product => {
                    const productDiv = document.createElement("div");
                    productDiv.className = "product-item";
                    productDiv.innerHTML = `
                        <p><strong>${product.name}</strong> - ${product.price} ‚ÇΩ</p>
                        <p>${product.description}</p>
                        <p>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: ${product.categories.join(", ")}</p>
                        <button onclick="editProduct(${product.id})">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
                        <button onclick="deleteProduct(${product.id})">–£–¥–∞–ª–∏—Ç—å</button>
                    `;
                    productList.appendChild(productDiv);
                });
            })
            .catch(error => console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:", error));
    }

    form.addEventListener("submit", (event) => {
        event.preventDefault();
        const newProduct = {
            name: document.getElementById("name").value,
            price: document.getElementById("price").value,
            description: document.getElementById("description").value,
            categories: document.getElementById("categories").value.split(",").map(c => c.trim())
        };

        fetch("http://localhost:8080/api/products", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(newProduct)
        })
            .then(response => response.json())
            .then(() => {
                form.reset();
                loadProducts();
            })
            .catch(error => console.error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:", error));
    });

    window.deleteProduct = (id) => {
        fetch(`http://localhost:8080/api/products/${id}`, { method: "DELETE" })
            .then(() => loadProducts())
            .catch(error => console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:", error));
    };

    window.editProduct = (id) => {
        const newName = prompt("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:");
        const newPrice = prompt("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É:");
        const newDescription = prompt("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:");
        const newCategories = prompt("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):");

        if (newName && newPrice && newDescription && newCategories) {
            const updatedProduct = {
                name: newName,
                price: parseFloat(newPrice),
                description: newDescription,
                categories: newCategories.split(",").map(c => c.trim())
            };

            fetch(`http://localhost:8080/api/products/${id}`, {
                method: "PUT",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(updatedProduct)
            })
                .then(() => loadProducts())
                .catch(error => console.error("–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:", error));
        }
    };

    loadProducts();
});
// WebSocket –¥–ª—è —á–∞—Ç–∞
const chatMessages = document.getElementById("chat-messages");
const chatInput = document.getElementById("chat-input");
const chatSend = document.getElementById("chat-send");



const ws = new WebSocket('ws://localhost:3001?role=admin'); // –û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø–æ—Ä—Ç 3001!
ws.isAdmin = true;
ws.onopen = () => {
    console.log("‚úÖ –ê–¥–º–∏–Ω –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ WebSocket");
};

ws.onmessage = (event) => {
    // –≠—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π WebSocket
    const message = String(event.data); // –Ø–≤–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫—É
    console.log('üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', message);
    const messageElement = document.createElement("div");
    messageElement.textContent = message; // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    chatMessages.appendChild(messageElement);
};

ws.onerror = (error) => {
    console.error('‚ùå WebSocket –æ—à–∏–±–∫–∞:', error);
};

ws.onclose = () => {
    console.log('‚ùå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
};

// –ü—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
function sendMessage(message) {
    if (ws.readyState === WebSocket.OPEN) {
        ws.send(message);
        const messageElement = document.createElement("div");
        messageElement.textContent = `–í—ã (–ê–¥–º–∏–Ω): ${message}`; // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        chatMessages.appendChild(messageElement);
    } else {
        console.warn('‚ö†Ô∏è WebSocket –Ω–µ –æ—Ç–∫—Ä—ã—Ç');
    }
    console.log("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", message, typeof message); // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å string
}

chatSend.addEventListener("click", () => {
    if (chatInput.value.trim() !== "") {
        sendMessage(chatInput.value);
        chatInput.value = "";
    }
});

chatInput.addEventListener("keypress", (event) => {
    if (event.key === "Enter") {
        chatSend.click();
    }
});
