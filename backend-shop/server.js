const express = require('express');
const path = require('path');
const fs = require('fs');
const { graphqlHTTP } = require('express-graphql');
const { buildSchema } = require('graphql');
const cors = require('cors');
const WebSocket = require('ws');
const http = require('http');

const app = express();
const port = 3000;
const wsPort = 3001;

app.use(cors());

// –°—Ç–∞—Ç–∏—á–Ω—ã–µ —Ñ–∞–π–ª—ã (HTML, CSS, JS)
app.use(express.static(path.join(__dirname, 'public')));

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ JSON-—Ñ–∞–π–ª–∞
const loadProducts = () => {
    const data = fs.readFileSync(path.join(__dirname, 'products.json'), 'utf8');
    return JSON.parse(data);
};

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ö–µ–º—É GraphQL
const schema = buildSchema(`
    type Product {       
        name: String!
        price: Float!
        description: String
        categories: [String]
    }

    type Query {
        products: [Product]
        product(id: ID!): Product
        productNamesAndPrices: [Product]
    }
`);

// –†–µ–∞–ª–∏–∑—É–µ–º —Ä–µ–∑–æ–ª–≤–µ—Ä—ã GraphQL
const root = {
    products: () => loadProducts(),
    product: ({ id }) => loadProducts().find(product => product.id === id),
    productNamesAndPrices: () => loadProducts().map(({ id, name, price }) => ({ id, name, price })),
};

// –ü–æ–¥–∫–ª—é—á–∞–µ–º GraphQL API
app.use('/graphql', graphqlHTTP({
    schema: schema,
    rootValue: root,
    graphiql: true // –í–∫–ª—é—á–∞–µ–º GraphiQL UI
}));

// REST API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
// app.get('/api/products', (req, res) => {
//     fs.readFile(path.join(__dirname, 'products.json'), 'utf8', (err, data) => {
//         if (err) {
//             res.status(500).send('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö');
//             return;
//         }
//         res.json(JSON.parse(data));
//     });
// });

// –°–æ–∑–¥–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä –æ—Ç–¥–µ–ª—å–Ω–æ
const server = require('http').createServer(app);

// WebSocket —Å–µ—Ä–≤–µ—Ä


server.on('upgrade', (request, socket, head) => {
    wss.handleUpgrade(request, socket, head, (ws) => {
        wss.emit('connection', ws, request);
    });
});



// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(port, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ http://localhost:${port}`);
    console.log(`GraphQL API: http://localhost:${port}/graphql`);
});

// WebSocket —Å–µ—Ä–≤–µ—Ä (–æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Ä—Ç)
const wss = new WebSocket.Server({ port: wsPort });

wss.on('connection', (ws) => {
    console.log('üîó –ù–æ–≤—ã–π WebSocket –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω');

    ws.on('message', (message) => {
        console.log(`üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:`, message, typeof message);

        let textMessage;
        if (message instanceof Buffer) {
            // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—à–ª–∏ –≤ –≤–∏–¥–µ Buffer, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏—Ö –≤ —Å—Ç—Ä–æ–∫—É
            textMessage = message.toString('utf-8');
        } else {
            // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ —Å—Ç—Ä–æ–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö –∫–∞–∫ –µ—Å—Ç—å
            textMessage = message;
        }

        console.log('üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ (—Å—Ç—Ä–æ–∫–∞):', textMessage, typeof textMessage);

        if (typeof textMessage === 'string') {
            // –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
            wss.clients.forEach(client => {
                if (client.readyState === WebSocket.OPEN) {
                    client.send(textMessage);
                }
            });
        } else {
            console.error("–û—à–∏–±–∫–∞: –æ–∂–∏–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞, –∞ –ø–æ–ª—É—á–µ–Ω –æ–±—ä–µ–∫—Ç.");
        }
    });

    ws.on('close', () => console.log('‚ùå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è'));
});

console.log(`üì° WebSocket-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ ws://localhost:${wsPort}`);
